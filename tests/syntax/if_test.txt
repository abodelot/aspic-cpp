a = 10
if a > 5
    a += 1
    a += 2
end
assert(a == 13)

if a > 20
    a *= 1000
    assert(false)
end
assert(a == 13)

# nested if statements
test = 0
if a > 10
    test = 1
    if a > 11
        test = 2
        if a > 12
            test = 3
            if a > 13
                test = 4
                assert(false)
            end
        end
    end
end
assert(test == 3)

test = 0
if test += 1
    assert(test == 1)
end
assert(test == 1)

# allow parentheses
if (test > 0)
    test = 0
end
assert(test == 0)

# return result from last expression (ruby-like)
x = if true
   "hello ruby"
end
assert(x == "hello ruby")

x = if false
    "hello ruby"
end
assert(x == null)

# ensure last value is returned
y = if 1
    "last"
    "value"
    "returned"
end
assert(y == "returned")

# if-else statement, test is true
x = 10
y = "a"
if x == 10
    y = "b"
else
    y = "c"
end
assert(y == "b")

# if-else statement, test is false
x = 20
y = "a"
if x == 10
    y = "b"
else
    y = "c"
end
assert(y == "c")

x = 0
if 1 == 1
    x += 10
    if 2 == 3
        x += 100
    else
        x -= 100
    end
else
    x -= 10
end
assert(x == -90)

# nested if in test expression (ruby-like)
x = if "hello" == if true
        "hello"
    else
        "good bye"
    end
  "a"
else
  "b"
end
assert(x == "a")

# if-elif statement
x = 0
y = 0
i = 0
while i < 10
    if i == 2
        x += i * 10
    elif i == 3
        y += i * 10
    end
    i += 1
end
assert(x == 20)
assert(y == 30)

# if-elif-elif statement
i = 0
s = "foobar"
flag_a = false
flag_b = false
flag_c = false
while i < str_len(s)
    c = s[i]
    if c == "a"
        flag_a = true
    elif c == "b"
        flag_b = true
    elif c == "c"
        flag_c = true
    end
    i += 1
end
assert(flag_a)
assert(flag_b)
assert(!flag_c)

# if-elif-else statement
i = 0
s = "foobar"
flag_a = false
flag_b = false
unknown = 0
while i < str_len(s)
    c = s[i]
    if c == "a"
        flag_a = true
    elif c == "b"
        flag_b = true
    else
        unknown += 1
    end
    i += 1
end
assert(flag_a)
assert(flag_b)
assert(unknown == 4)

# if-elif-elif-else statement
i = 0
s = "Hello, World 9001!"
nb_digits = 0
nb_upper_chars = 0
nb_lower_chars = 0
nb_other = 0
while i < str_len(s)
    c = s[i]
    if c >= '0' && c <= '9'
        nb_digits += 1
    elif c >= 'A' && c <= 'Z'
        nb_upper_chars += 1
    elif c >= 'a' && c <= 'z'
        nb_lower_chars += 1
    else
        nb_other += 1
    end
    i += 1
end
assert(nb_digits == 4)
assert(nb_upper_chars == 2)
assert(nb_lower_chars == 8)
assert(nb_other == 4)
